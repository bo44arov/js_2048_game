{"version":3,"sources":["scripts/main.js"],"names":["Game","tableSize","numberElements","handleMove","bind","start","initSelectors","initListeners","renderTable","tableEl","document","querySelector","scoreEl","messageLoseEl","messageWinEl","messageStartEl","startButtonEl","window","addEventListener","score","gameOver","hasWon","matrix","Array","fill","map","classList","add","contains","remove","textContent","addNumber","render","Math","random","freeCells","getFreeCells","floor","length","reduce","row","rowIndex","forEach","val","colIndex","push","getRandomCell","y","x","getRandomNumber","emptyCells","filter","el","concat","slice","degree","_","reverse","Error","event","key","merge","matrixRotate","matrixRef","some","matrixShift","hasMatrixChanged","createElement","append","cell","rows","className","arr","cellIndex","field","cells","setTimeout","canMove","game"],"mappings":"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","file":"main.420fabe8.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nclass Game {\n  constructor(tableSize = 4) {\n    this.tableSize = tableSize;\n    this.numberElements = [];\n\n    this.handleMove = this.handleMove.bind(this);\n    this.start = this.start.bind(this);\n\n    this.initSelectors();\n    this.initListeners();\n    this.renderTable();\n  }\n\n  /**\n   * Save references to the DOM elements\n   */\n  initSelectors() {\n    this.tableEl = document.querySelector('table');\n    this.scoreEl = document.querySelector('.game-score');\n    this.messageLoseEl = document.querySelector('.message-lose');\n    this.messageWinEl = document.querySelector('.message-win');\n    this.messageStartEl = document.querySelector('.message-start');\n    this.startButtonEl = document.querySelector('.button');\n  }\n\n  /**\n   * Initialize event listeners\n   */\n  initListeners() {\n    window.addEventListener('keyup', this.handleMove);\n    this.startButtonEl.addEventListener('click', this.start);\n  }\n\n  /**\n   * Start/restart the game\n   */\n  start() {\n    this.score = 0;\n    this.gameOver = false;\n    this.hasWon = false;\n\n    this.matrix = new Array(this.tableSize)\n      .fill([])\n      .map(() => new Array(this.tableSize).fill(0));\n\n    this.messageLoseEl.classList.add('hidden');\n    this.messageWinEl.classList.add('hidden');\n\n    if (this.startButtonEl.classList.contains('start')) {\n      this.startButtonEl.classList.remove('start');\n      this.startButtonEl.classList.add('restart');\n      this.startButtonEl.textContent = 'Restart';\n      this.messageStartEl.classList.add('hidden');\n    }\n\n    this.addNumber();\n    this.addNumber();\n    this.render();\n  }\n\n  /**\n   * Get random number (2 or 4)\n   */\n  getRandomNumber() {\n    return Math.random() >= 0.9 ? 4 : 2;\n  }\n\n  /**\n   * Get random free cell\n   */\n  getRandomCell() {\n    const freeCells = this.getFreeCells();\n\n    return freeCells[Math.floor(Math.random() * freeCells.length)];\n  }\n\n  /**\n   * Look for cells with value of 0\n   * and save their coordinates as [y, x]\n   */\n  getFreeCells() {\n    return this.matrix.reduce((freeCells, row, rowIndex) => {\n      row.forEach(\n        (val, colIndex) => val === 0 && freeCells.push([rowIndex, colIndex])\n      );\n\n      return freeCells;\n    }, []);\n  }\n\n  /**\n   * Add random number (2 or 4) into a random free cell\n   */\n  addNumber() {\n    // Get coordinates of a random free cell\n    const [y, x] = this.getRandomCell();\n\n    // Add a new number to the matrix using known coordinates\n    this.matrix[y][x] = this.getRandomNumber();\n    this.render();\n  }\n\n  /**\n   * Check if it's possible to make a move\n   */\n  canMove() {\n    // First check if there are free cells\n    const freeCells = this.getFreeCells();\n\n    if (freeCells.length > 0) {\n      return true;\n    }\n\n    // Check if there are two same numbers in a row\n    // (both horizontally and vertically)\n    for (let y = 0; y < this.tableSize; y++) {\n      for (let x = 0; x < this.tableSize; x++) {\n        if (\n          (this.matrix[y][x + 1]\n            && this.matrix[y][x] === this.matrix[y][x + 1])\n          || (this.matrix[y + 1] && this.matrix[y][x] === this.matrix[y + 1][x])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    // Finally return false\n    return false;\n  }\n\n  /**\n   * Shift all non-zero elements of each row to the left\n   */\n  matrixShift() {\n    const emptyCells = new Array(this.tableSize).fill(0);\n\n    this.matrix = this.matrix.map((row) => {\n      return row\n        .filter((el) => el > 0)\n        .concat(emptyCells)\n        .slice(0, this.tableSize);\n    });\n  }\n\n  /**\n   * Rotate matrix to the given degree\n   */\n  matrixRotate(degree) {\n    switch (degree) {\n      case 90:\n      case -270:\n        this.matrix = this.matrix.map((_, rowIndex) =>\n          this.matrix.map((row) => row[rowIndex]).reverse()\n        );\n        break;\n      case 180:\n      case -180:\n        this.matrix = this.matrix.map((row) => row.reverse()).reverse();\n        break;\n      case 270:\n      case -90:\n        this.matrix = this.matrix.map((_, rowIndex) =>\n          this.matrix.map((row) => [...row].reverse()[rowIndex])\n        );\n        break;\n      case 0:\n      case 360:\n      case -360:\n        return this.matrix;\n      default:\n        throw new Error('Degree must be one of 90, -90, 180, -180, 270, -270');\n    }\n  }\n\n  /**\n   * Trigger matrix shift by rotating it\n   * to emulate shifts in different directions\n   *\n   * Examples:\n   * 0 - to emulate shift left\n   * 90 - to emulate shift down\n   * 180 - to emulate shift right\n   * 270 - to emulate shift up\n   */\n  handleMove(event) {\n    // Don't do anything if the game is over\n    if (this.gameOver) {\n      return;\n    }\n\n    switch (event.key) {\n      case 'ArrowLeft':\n        this.merge();\n        this.render();\n        break;\n      case 'ArrowDown':\n        this.matrixRotate(90);\n        this.merge();\n        this.matrixRotate(-90);\n        this.render();\n        break;\n      case 'ArrowRight':\n        this.matrixRotate(180);\n        this.merge();\n        this.matrixRotate(-180);\n        this.render();\n        break;\n      case 'ArrowUp':\n        this.matrixRotate(270);\n        this.merge();\n        this.matrixRotate(-270);\n        this.render();\n        break;\n    }\n  }\n\n  /**\n   * Compare matrixes\n   */\n  hasMatrixChanged(matrixRef) {\n    return this.matrix.some((row, y) =>\n      row.some((val, x) => val !== matrixRef[y][x])\n    );\n  }\n\n  /**\n   * Shift matrix and merge pairs\n   */\n  merge() {\n    // Deeply clone matrix\n    const matrixRef = this.matrix.map((row) => row.slice());\n\n    for (let y = 0; y < this.tableSize; y++) {\n      for (let x = 0; x < this.tableSize - 1; x++) {\n        this.matrixShift();\n\n        if (this.matrix[y][x] === this.matrix[y][x + 1]) {\n          this.matrix[y][x] *= 2;\n          this.matrix[y][x + 1] = 0;\n          this.score += this.matrix[y][x];\n        }\n      }\n    }\n\n    // We don't need to add a new number when nothing has changed\n    // after the move e.g. when all numbers were aligned to the left\n    // and a user pressed the ArrowLeft key\n    if (this.hasMatrixChanged(matrixRef)) {\n      this.addNumber();\n    }\n  }\n\n  /**\n   * Dynamically render table with given size\n   */\n  renderTable() {\n    for (let y = 0; y < this.tableSize; y++) {\n      const row = document.createElement('tr');\n\n      row.classList.add('field-row');\n      this.tableEl.append(row);\n\n      for (let x = 0; x < this.tableSize; x++) {\n        const cell = document.createElement('td');\n\n        cell.classList.add('field-cell');\n        row.append(cell);\n      }\n    }\n  }\n\n  /**\n   * Render the matrix and show win/lose messages when needed\n   */\n  render() {\n    const { rows } = this.tableEl;\n\n    this.numberElements.forEach((el) => {\n      el.textContent = '';\n      el.className = 'field-cell';\n    });\n    this.numberElements = [];\n\n    this.matrix.forEach((arr, rowIndex) =>\n      arr.forEach((val, cellIndex) => {\n        if (val) {\n          const field = rows[rowIndex].cells[cellIndex];\n\n          field.textContent = val;\n          field.classList.add(`field-cell--${val}`);\n          this.numberElements.push(field);\n          this.scoreEl.textContent = this.score;\n        }\n      })\n    );\n\n    // Show a win massage when 2048 has been collected\n    if (\n      this.matrix.some((row) => row.some((el) => el === 2048))\n      && !this.hasWon\n    ) {\n      this.messageWinEl.classList.remove('hidden');\n      this.hasWon = true;\n\n      setTimeout(() => {\n        this.messageWinEl.classList.add('hidden');\n      }, 10000);\n    }\n\n    // Show a game over massage when there are no possible moves left\n    if (!this.canMove()) {\n      this.messageLoseEl.classList.remove('hidden');\n      this.gameOver = true;\n    }\n  }\n}\n\nconst game = new Game();\n\ngame.render();\n"]}